using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using Newtonsoft.Json;

namespace StyleCompiler.ThemeBuilder
{

    class CustomThemeGenerator
    {
        static readonly string THEME_BUILDER_PROMO = String.Join("\n",
            "/*",
            "* Generated by DevExpress Theme Builder",
            "* http://js.devexpress.com/themebuilder/",
            "*/",
            "",
            ""
        );

        const string LESS_VAR_FORMAT = "{0}: {1};";

        class CustomThemeMeta
        {
            public string HighlightColor { get; set; }
            public KeyValuePair<string, string>[] Items { get; set; }
        }


        public static void Generate(string sourcePath, ThemeId baseThemeId, string customMetaFilePath, string outputPath)
        {
            var baseThemeBuilderItem = ThemeBuilderItem.Get(sourcePath, baseThemeId, ThemeBuilderLessFilesReader.GetLessPaths(sourcePath, baseThemeId));
            var baseThemeBuilderMeta = baseThemeBuilderItem.Metadata.ToDictionary(item => item.Key, item => item);
            var customThemeMeta = JsonConvert.DeserializeObject<CustomThemeMeta>(File.ReadAllText(customMetaFilePath));

            var additionalConstants = new StringBuilder();

            if (customThemeMeta.HighlightColor != null)
            {
                foreach (var entry in baseThemeBuilderMeta)
                {
                    var isAccent = entry.Value.PaletteColorOpacity != null;
                    if (isAccent)
                    {
                        additionalConstants.AppendFormat(
                            LESS_VAR_FORMAT,
                            entry.Key,
                            ApplyOpacity(customThemeMeta.HighlightColor, double.Parse(entry.Value.PaletteColorOpacity, CultureInfo.InvariantCulture))
                        );
                    }
                }
            }

            foreach (var item in customThemeMeta.Items)
                additionalConstants.AppendFormat(LESS_VAR_FORMAT, item.Key, item.Value);

            var css = NodeRunner.CompileLess(baseThemeBuilderItem.LessTemplate + additionalConstants);

            var outputDir = Path.GetDirectoryName(outputPath);
            if(!Directory.Exists(outputDir))
                Directory.CreateDirectory(outputDir);

            File.WriteAllText(outputPath, THEME_BUILDER_PROMO + css);
        }

        static string ApplyOpacity(string opaqueColor, double opacity)
        {
            if (opacity == 1)
                return opaqueColor;

            return String.Format(
                "rgba({0},{1},{2},{3:F2})",
                int.Parse(opaqueColor.Substring(1, 2), NumberStyles.HexNumber),
                int.Parse(opaqueColor.Substring(3, 2), NumberStyles.HexNumber),
                int.Parse(opaqueColor.Substring(5, 2), NumberStyles.HexNumber),
                opacity
            );
        }

    }
}
